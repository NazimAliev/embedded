/*
 Copyright (c) by Nazim Aliev
 All rights reserved.

 nazim.ru@gmail.com

*/

/*
 *  ======== server.cfg ========
 */

var gSettings = xdc.useModule('ti.sdo.ce.global.Settings')
//gSettings.profile = "notrace";
gSettings.profile = "debug";

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* Set xdcruntime proxies for BIOS OS */
xdc.useModule('ti.sysbios.BIOS');
xdc.useModule('ti.sysbios.xdcruntime.Settings');


/*
 *  ======== Setup SYSLINK transport ========
 */

var Notify = xdc.useModule('ti.sdo.ipc.Notify');
Notify.SetupProxy = xdc.useModule('ti.sdo.ipc.family.omap3530.NotifyCircSetup');

var MessageQ = xdc.module('ti.sdo.ipc.MessageQ');
MessageQ.SetupTransportProxy = xdc.module('ti.sdo.ipc.transports.TransportShmNotifySetup');

/*
 *  ======== Setup cache ========
 */
/*var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
//Cache.MAR0_31    = 0xffffffff;
//Cache.MAR32_63   = 0xffffffff;
//Cache.MAR64_95   = 0xffffffff;
Cache.MAR96_127  = 0xffffffff;
Cache.MAR128_159 = 0xffffffff;
Cache.MAR160_191 = 0xffffffff;
Cache.MAR192_223 = 0xffffffff;
Cache.MAR224_255 = 0xffffffff;
Cache.initSize.l1pSize = Cache.L1Size_32K;
Cache.initSize.l1dSize = Cache.L1Size_32K;*/

var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
//Cache.MAR0_31    = 0xffffffff;
//Cache.MAR32_63   = 0xffffffff;
//Cache.MAR64_95   = 0xffffffff;
Cache.MAR96_127  = 0xffffffff;
//Cache.MAR128_159 = 0xfffffEff;
Cache.MAR128_159 = 0xffffffff;
Cache.MAR160_191 = 0xffffffff;
Cache.MAR192_223 = 0xffffffff;
Cache.MAR224_255 = 0xffffffff;
Cache.initSize.l1pSize = Cache.L1Size_32K;
Cache.initSize.l1dSize = Cache.L1Size_32K;
Cache.initSize.l2Size = Cache.L2Size_32K;


/*
 *  ======== Create heaps ========
 */

/*
 *  Create heaps as global variables so they can be used in C code. For
 *  example, DSKT2 configuration in rtcfg_bios_fcinit.c references these
 *  heaps.
 */
var sramName = "IRAM";
var intHeapSize = 64*1024;   // Size to make internal heap
var L1HeapSize = 48*1024;
//var extHeapSize = 0x50000;   // Size to make external heap
var extHeapSize = 0x1000000;   // Size to make external heap

var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();

// setting up memory heaps
heapMemParams.size = L1HeapSize;
heapMemParams.sectionName = ".L1D_HEAP";

/* Create L1DHEAP as global variables so it can be used in C code. */
Program.global.L1D_HEAP = HeapMem.create(heapMemParams);

heapMemParams.size = intHeapSize;
heapMemParams.sectionName = ".INT_HEAP";

Program.global.INT_HEAP = HeapMem.create(heapMemParams);

heapMemParams.size = extHeapSize;
heapMemParams.sectionName = ".EXT_HEAP";

Program.global.EXT_HEAP = HeapMem.create(heapMemParams);

heapMemParams.size = Program.platform.externalMemoryMap["DDRALGHEAP"].len;
heapMemParams.sectionName = ".EXTALG_HEAP";
Program.global.EXTALG_HEAP = HeapMem.create(heapMemParams);


Program.sectMap[".L1D_HEAP"] = "L1DSRAM";  // L1DHEAP

Program.sectMap[".EXTALG_HEAP"] = "DDRALGHEAP";
/* Place code */
Program.sectMap[".text"] = Program.platform.dataMemory;
/* Place heaps. */
Program.sectMap[".INT_HEAP"] = sramName;
Program.sectMap[".EXT_HEAP"] = Program.platform.dataMemory;


// setting up DSKT2

var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');

// DSKT2 memory config
DSKT2.DARAM0 = "L1D_HEAP";
DSKT2.DARAM1 = "L1D_HEAP";
DSKT2.DARAM2 = "L1D_HEAP";
DSKT2.SARAM0 = "INT_HEAP";
DSKT2.SARAM1 = "EXT_HEAP";
DSKT2.SARAM2 = "EXT_HEAP";
DSKT2.ESDATA = "EXT_HEAP";
DSKT2.IPROG = "EXT_HEAP";
DSKT2.EPROG = "EXT_HEAP";
DSKT2.DSKT2_HEAP = "EXT_HEAP";
DSKT2.ALLOW_EXTERNAL_SCRATCH = true;
DSKT2.DARAM_SCRATCH_SIZES[0] = L1HeapSize - 1024; // minus 1kbyte for ACPY3 -- scuki blead! 
DSKT2.SARAM_SCRATCH_SIZES[0] = intHeapSize;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = Program.global.EXT_HEAP;
Memory.defaultHeapSize = 0x4000;



/* ======== IPC setup ======== */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

var settings = xdc.useModule('ti.sdo.ipc.family.Settings');
var procNames = settings.getDeviceProcNames();
MultiProc.setConfig("DSP", procNames);

xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

xdc.useModule('ti.syslink.ipc.rtos.Syslink');


/* ======== Logging setup ======== */
var Defaults = xdc.useModule('xdc.runtime.Defaults');

var Diags = xdc.useModule('xdc.runtime.Diags');
var Registry = xdc.useModule('xdc.runtime.Registry');
var System = xdc.useModule('xdc.runtime.System');

if (gSettings.profile == "debug")
{
    // Set Main diags to RUNTIME_ON.
    xdc.useModule('xdc.runtime.Main');
    Diags.setMaskMeta('xdc.runtime.Main', Diags.ALL, Diags.RUNTIME_ON);

    // Enable logging for metaonly modules

    Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF);

    //  Set System_printf() to use SysCBuf, to enable CE_DEBUG trace from the
    //  server. Logger needs to be set to LoggerSys or LoggerSysTID, that
    //  outputs trace using System_printf() calls.

    System.SupportProxy = xdc.useModule('ti.sdo.ce.utils.syscbuf.SysCBuf');
    
    // Choose the logger that prints thread ID
    var LoggerSys = xdc.useModule('ti.sdo.utils.loggers.LoggerSysTID');
    var LoggerSysParams = new LoggerSys.Params();

    myLogger = LoggerSys.create(LoggerSysParams);

    myLogger.instance.name = "myLogger";
    Defaults.common$.logger = myLogger;
}
else
{
   //  Set System_printf() to use SysCBuf, to enable CE_DEBUG trace from the
    //  server. Logger needs to be set to LoggerSys or LoggerSysTID, that
    //  outputs trace using System_printf() calls.

    var syscbuf = xdc.useModule('ti.sdo.ce.utils.syscbuf.SysCBuf');
    syscbuf.bufSize = 256;
    System.SupportProxy = syscbuf;
    
    // Choose the logger that prints thread ID
    var LoggerSys = xdc.useModule('ti.sdo.utils.loggers.LoggerSysTID');
    var LoggerSysParams = new LoggerSys.Params();

    myLogger = LoggerSys.create(LoggerSysParams);

    myLogger.instance.name = "myLogger";
    Defaults.common$.logger = myLogger;
   

    Diags.setMaskMeta("%", Diags.ALL, Diags.ALWAYS_OFF);
    Diags.setMaskMeta(".*", Diags.ALL, Diags.ALWAYS_OFF);

    //Diags.setMaskMeta("ti.sdo.fc.dskt2.DSKT2", Diags.ALL, Diags.ALWAYS_OFF);
}


/* ======== Modules needed by Codec Engine ======== */
xdc.useModule('xdc.runtime.knl.GateProcess');
xdc.useModule('xdc.runtime.knl.SemProcess');
xdc.useModule('xdc.runtime.knl.SemThread');
xdc.useModule('ti.sysbios.utils.Load');

/* system wide shared region assignments */

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');
var syslinkSharedMem = Program.cpu.memoryMap["SR0"];
var ipcSharedMem = Program.cpu.memoryMap["SR1"];

// Set up SharedRegion 0 for SysLink HOST<--->dsp communication
var entry = new SharedRegion.Entry();

entry.base = syslinkSharedMem.base;
entry.len = syslinkSharedMem.len;
entry.ownerProcId = MultiProc.getIdMeta("HOST");
entry.isValid = true;
entry.name = "SysLink";
entry.cacheEnable = true;

SharedRegion.setEntryMeta(
    0,
    entry
);

// Shared region 1
var entry2 = new SharedRegion.Entry();

entry2.base = ipcSharedMem.base;
entry2.len = ipcSharedMem.len;
entry2.ownerProcId = MultiProc.getIdMeta("HOST");
entry2.isValid = true;
entry2.createHeap = true;
entry2.cacheEnable = true;
entry2.name = "IpcShared";

SharedRegion.setEntryMeta(
    1,  /* index */
    entry2
);

environment['xdc.cfg.check.fatal'] = 'false';
